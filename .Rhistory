geom_boxplot(
width = 0.12, # gère la largeur des boites
outlier.color ="purple", # passe les outliers en orange
alpha = 0.5) # ajoute une transparence dans les boites (elles sont plus claires que l'aire des courbes de densités) +
g4 <- g2 + facet_grid( vars(ZAI), vars(Genre))
g4
g2 <- g1 +
geom_boxplot(
width = 0.12, # gère la largeur des boites
outlier.color ="purple", # passe les outliers en orange
alpha = 0.5) + # ajoute une transparence dans les boites (elles sont plus claires que l'aire des courbes de densités)
geom_point()
g3 <- g2 + facet_wrap( vars(Region) )
g4 <- g2 + facet_grid( vars(ZAI), vars(Genre))
plot(g2)
g3
g4
View(g3)
library(sp)
library(rgdal)
library(geosphere)
library(ncdf4)
library(lubridate)
library(stringr)
library(tidyr)
library(ggplot2)
library(caTools)
library(RMAWGEN)
library(signal)
library(forecast)
#library(futureheatwaves)
#library(RmarineHeatWaves)
library(plyr)
library(dplyr)
library(vegan)
require(IRanges)
library(weathermetrics)
library(verification)
library(SpecsVerification)
library(s2dverification)
library(easyVerification)
library(PRROC)
library(SpatialVx)
library(extRemes)
library(gridExtra)
library("readxl")
############ Load necessary libraries
suppressPackageStartupMessages({
library(sp)
library(rgdal)
library(geosphere)
library(ncdf4)
library(lubridate)
library(stringr)
library(tidyr)
library(ggplot2)
library(caTools)
library(RMAWGEN)
library(signal)
library(forecast)
#library(futureheatwaves)
#library(RmarineHeatWaves)
library(plyr)
library(dplyr)
library(vegan)
require(IRanges)
library(weathermetrics)
library(FactoMineR)
library(missMDA)
library(TTR)
library(pspline)
library(sfsmisc)
library(raster)
library(rasterVis)
library(verification)
library(SpecsVerification)
library(s2dverification)
library(easyVerification)
library(PRROC)
library(SpatialVx)
library(extRemes)
library(gridExtra)
library("readxl")
})
set_Polypath(FALSE)
basepath="/Users/yacoub/Desktop/Training/R/Fatoumata/"
Data_NC<-nc_open(filename = paste("01-tamsatDaily.v3.1-694224000-1643673600_4.0_5.0_10.0_26.0.nc",sep=""))
Data_NC<-nc_open(filename = paste("01-tamsatDaily.v3.1-694224000-1643673600_4.0_5.0_10.0_26.0.nc",sep=""))
library(tidyverse)
library(GGally)
install.packages("GGally")
install.packages("GGally")
#library(network)
#library(sna)
library(networkD3)
install.packages("networkD3")
install.packages("networkD3")
library(readxl)
library(tidyverse)
library(GGally)
#library(network)
#library(sna)
library(networkD3)
library(readxl)
library(tidyverse)
library(GGally)
#library(network)
#library(sna)
library(networkD3)
library(readxl)
library(rio)
library(rio)
initiatives <- rio::import("https://docs.google.com/spreadsheets/d/1RC6KDX2ZuXvXMAwWR5PHTuV-Wm03eeoU/edit?usp=share_link&ouid=116069301881329276714&rtpof=true&sd=true")
View(initiatives)
700000/12
?plot
?plot()
source("~/Desktop/SIGP_training/R-packages_maps_spatial_data/Processing/prcp.R")
# Charger les packages nécessaires
library(dplyr)
library(tidync)
library(ncdf4)
library(ncdf4)
library(rio)
library(lubridate)
library(rgdal)
library(ggplot2)
library(metR)
library(raster)
setwd("~/Desktop/SIGP_training/R-packages_maps_spatial_data/Processing")
dir.create("Products",recursive = T,showWarnings = F)
dir.create("Data",recursive = T,showWarnings = F)
rm(list = ls())
StartYear= 1981
EndYear= 1982
for (k in StartYear:EndYear) {
download.file(paste("https://data.chc.ucsb.edu/products/CHIRPS-2.0/global_daily/netcdf/p05/chirps-v2.0.",k,".days_p05.nc",sep=""),destfile =paste("Data/",k,".nc",sep = "" ))
}
library(dplyr)
library(tidync)
library(ncdf4)
library(rio)
library(rgdal)
library(ggplot2)
library(metR)
library(raster)
setwd("~/Desktop/SIGP_training/R-packages_maps_spatial_data/Processing")
dir.create("Products",recursive = T,showWarnings = F)
dir.create("Data",recursive = T,showWarnings = F)
for (k in 2020:2022) {
download.file(paste("https://iridl.ldeo.columbia.edu/SOURCES/.UCSB/.CHIRPS/.v2p0/.daily-improved/.global/.0p05/.prcp/Y/-40/0.5/40/GRID/X/-25/0.5/55/GRID/T/(1%20Jun%20",k,")/(31%20Octc%20",k,")/RANGEEDGES/data.nc",sep=""),destfile =paste("Data/",k,".nc",sep = "" ))
}
for (k in 2020:2022) {
Data_NC<-nc_open(paste("Data/",k,".nc",sep=""))
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Date=seq(as.Date(paste(k,"-06-01",sep="")),as.Date(paste(k,"-10-31",sep="")),by="days")
X<-length(ncvar_get(Data_NC,"X"))
Y<-length(ncvar_get(Data_NC,"Y"))
Date_All=sort(rep(Date,X*Y),decreasing = F)
Data$T<-Date_All
dir.create("Products/CHIRPS/",recursive = T,showWarnings = F)
rio::export(Data,paste("Products/CHIRPS/",k,".csv",sep=""))
}
Data_NC<-nc_open(paste("Data/",k,".nc",sep=""))
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Date=seq(as.Date(paste(k,"-06-01",sep="")),as.Date(paste(k,"-10-31",sep="")),by="days")
X<-length(ncvar_get(Data_NC,"X"))
Y<-length(ncvar_get(Data_NC,"Y"))
Date_All=sort(rep(Date,X*Y),decreasing = F)
d= data.frame(Date_All)
View(d)
View(Data)
Data_NC<-nc_open(paste("Data/",k,".nc",sep=""))
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Date=seq(as.Date(paste(k,"-06-01",sep="")),as.Date(paste(k,"-10-31",sep="")),by="days")
X<-length(ncvar_get(Data_NC,"X"))
Y<-length(ncvar_get(Data_NC,"Y"))
Date_All=sort(rep(Date,X*Y),decreasing = F)
Data$T<-Date_All
View(Data)
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Data = Data["X","Y"]
View(Data)
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Data = Data[["X","Y"]]
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Data <- Data[c("X", "Y")]
View(Data)
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Data <- Data[c("X", "Y")]
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Data <- Data[c("X", "Y")]
colnames(Data)[colnames(Data) == "X"] <- "lon"
colnames(Data)[colnames(Data) == "Y"] <- "lat"
Data$ID <- seq_along(Data[, 1])
Data$ID <- seq_along(Data[1, ])
Data_NC<-nc_open(paste("Data/",k,".nc",sep=""))
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Date=seq(as.Date(paste(k,"-06-01",sep="")),as.Date(paste(k,"-10-31",sep="")),by="days")
X<-length(ncvar_get(Data_NC,"X"))
Y<-length(ncvar_get(Data_NC,"Y"))
Data$T<-Date_All
View(Data)
Data=filter(Data,T==2022-06-01)
Data_NC<-nc_open(paste("Data/",k,".nc",sep=""))
Data<-tidync(paste("Data/",k,".nc",sep=""))%>%hyper_tibble(na.rm = F)
Date=seq(as.Date(paste(k,"-06-01",sep="")),as.Date(paste(k,"-10-31",sep="")),by="days")
X<-length(ncvar_get(Data_NC,"X"))
Y<-length(ncvar_get(Data_NC,"Y"))
Data$T<-Date_All
Data=filter(Data,T=="2022-06-01")
View(Data)
Data <- Data[c("X", "Y")]
colnames(Data)[colnames(Data) == "X"] <- "lon"
colnames(Data)[colnames(Data) == "Y"] <- "lat"
seq_along(Data[,1])
seq_along(Data[,1:2])
Data$ID <- seq_along(Data[,1:25921])
seq_along(Data[,1:25921])
1:25921
Data$ID <- 1:25921
Data <- Data[c("ID","lon", "lat")]
dir.create("Products/File/",recursive = T,showWarnings = F)
rio::export(Data,paste("Products/File/",k,".csv",sep=""))
setwd("~/Desktop/SIGP/")
rm(list = ls())
# Install the nasapower package if not already installed
if (!require(nasapower)) {
install.packages("nasapower")
}
# Load the librarys
library(nasapower)
library(rio)
# Specify the coordinates of the location (latitude, longitude)
lon = seq(151, 152, .5)
lat = seq(28,29,.5)
# Specify the date range
start_date <- "1981-01-01"
end_date <- "2023-05-23"
# Specify the variables to download (in this example, solar radiation)
variables <- c("RH2M", "T2M")
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, lati),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
}
}
View(data)
for (lont in lon) {
for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, lati),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
}
# Ajouter la colonne NasaPId avec la valeur correspondante
data$NasaPId <- paste(lont, lati, sep = "_")
# Concaténer les nouvelles données à l'objet Data
Data <- rbind(Data, data)
}
View(Data)
View(data)
# Specify the coordinates of the location (latitude, longitude)
lon = seq(-5, -10, .5)
# Specify the coordinates of the location (latitude, longitude)
lon = seq(5, 10, .5)
# Specify the coordinates of the location (latitude, longitude)
lon = - seq(5, 10, .5)
lat = rep(-37,5)
lat = rep(-37,12)
length(lat)
length(lon)
lon
lat = rep(-37,11)
lat
# Specify the date range
start_date <- "1981-01-01"
end_date <- "2023-05-23"
# Specify the variables to download (in this example, solar radiation)
variables <- c("RH2M", "T2M")
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, lati),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
}
# Ajouter la colonne NasaPId avec la valeur correspondante
data$NasaPId <- paste(lont, lati, sep = "_")
# Concaténer les nouvelles données à l'objet Data
Data <- rbind(Data, data)
}
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
}
View(data)
# Specify the date range
start_date <- "2023-05-23"
end_date <- "2023-05-23"
# Specify the variables to download (in this example, solar radiation)
variables <- c("RH2M", "T2M")
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
data$NasaPId <- paste(lont, lati, sep = "_")
# Concaténer les nouvelles données à l'objet Data
Data <- rbind(Data, data)
}
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
data$NasaPId <- paste(lont, 37, sep = "_")
# Concaténer les nouvelles données à l'objet Data
Data <- rbind(Data, data)
}
lont
paste(lont, 37, sep = "_")
# Ajouter la colonne NasaPId avec la valeur correspondante
data$NasaPId <- paste(lont, 37, sep = "_")
# Concaténer les nouvelles données à l'objet Data
Data <- rbind(Data, data)
View(data)
View(Data)
latitude <- 40.71
longitude <- -74.01
data <- get_power(
community = "AG",
lonlat = c(-2, 11),
pars = c("RH2M", "T2M"),
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
View(data)
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
data$NasaPId <- paste(lont, 37, sep = "_")
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
# Concaténer les nouvelles données à l'objet Data
#Data <- rbind(Data, data)
}
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
View(data)
data$NasaPId <- paste(lont, 37, sep = "_")
View(data)
Data=rbind(Data,data)
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
data$NasaPId <- paste(lont, 37, sep = "_")
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
# Concaténer les nouvelles données à l'objet Data
#Data <- rbind(Data, data)
}
View(Data)
Data <- Data[c("LON", "LAT")]
View(Data)
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
data$NasaPId <- paste(lont, 37, sep = "_")
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
# Concaténer les nouvelles données à l'objet Data
#Data <- rbind(Data, data)
}
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
data$NasaPId <- paste(lont, 37, sep = "_")
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
# Concaténer les nouvelles données à l'objet Data
#Data <- rbind(Data, data)
}
Data <- Data[c("NasaPId","LON", "LAT")]
Data <- Data[c("nasapid","LON", "LAT")]
# Download the data from NASA POWER
Data= data.frame()
for (lont in lon) {
#for (lati in lat) {
data <- get_power(
community = "AG",
lonlat = c(lont, 37),
pars = variables,
dates = c(start_date,end_date),
temporal_api= "DAILY",
temporal_average = "DAILY"
)
data$nasapid <- paste(lont, 37, sep = "_")
Data=rbind(Data,data)
#}
# Ajouter la colonne NasaPId avec la valeur correspondante
# Concaténer les nouvelles données à l'objet Data
#Data <- rbind(Data, data)
}
Data
Data <- Data[c("nasapid","LON", "LAT")]
colnames(Data)[colnames(Data) == "LON"] <- "LonNP"
colnames(Data)[colnames(Data) == "LAT"] <- "LatNP"
View(Data)
rio::export(Data,file = "Data/Data.csv")
import requests
ddd=rio:import("/Users/yacoub/Desktop/UF/Jupyter/Data/Book4.csv")
ddd=rio::import("/Users/yacoub/Desktop/UF/Jupyter/Data/Book4.csv")
View(ddd)
ddd.type()
typeof(ddd)
type(ddd)
summarise(ddd)
ddd
summary(ddd)
rio::export(ddd, paste("/Users/yacoub/Desktop/UF/Jupyter/Data/"))
rio::export(ddd, paste("/Users/yacoub/Desktop/UF/Jupyter/Data/Book5.csv"))
